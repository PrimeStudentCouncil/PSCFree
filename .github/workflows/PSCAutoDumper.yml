name: PSC Free Dumper

on:
  repository_dispatch:
    types: [PSCtrigger]

jobs:
  free-dumper-job:
    if: ${{ github.event.client_payload.tag == 'PSCtrigger-Free' }}
    runs-on: windows-latest

    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Clone Private Repository
        shell: pwsh
        run: |
          git clone --depth=1 https://x-access-token:${{ secrets.KTNTOKEN }}@github.com/PrimeStudentCouncil/BlueArchiveAutoDump.git source

      - name: Install dependencies from private repo
        shell: pwsh
        working-directory: source
        run: |
          if (Test-Path requirements.txt) {
            pip install -r requirements.txt
          }

      - name: Run main.py and list dump_extracted
        shell: pwsh
        working-directory: source
        run: |
          python main.py
          Write-Host "Listing dump_extracted directory structure under source:"
          Get-ChildItem -Recurse .\dump_extracted

      - name: Read versions from Version.json
        shell: pwsh
        run: |
          $versionFile = Join-Path $env:GITHUB_WORKSPACE 'source\Version.json'
          Write-Host "Reading version from $versionFile"
          try {
            $versionJson    = Get-Content $versionFile -Raw | ConvertFrom-Json
            $jpVersion      = if ($versionJson.jp_version)     { $versionJson.jp_version }     else { "unknown" }
            $globalVersion  = if ($versionJson.global_version) { $versionJson.global_version } else { "unknown" }
          } catch {
            Write-Host "Failed to parse Version.json, defaulting to unknown"
            $jpVersion     = "unknown"
            $globalVersion = "unknown"
          }
          # 暂存到环境变量，后续步骤可用
          echo "JP_VER=$jpVersion"     | Out-File -FilePath version.env -Encoding utf8
          echo "GL_VER=$globalVersion" | Out-File -FilePath version.env -Encoding utf8

      - name: Load version env
        shell: pwsh
        run: |
          $lines = Get-Content version.env
          foreach ($line in $lines) {
            $parts = $line -split '='
            set-item env:$($parts[0]) $parts[1]
          }

      - name: Clone Excel data repo and prepare folders
        shell: pwsh
        run: |
          git clone --depth=1 https://x-access-token:${{ secrets.KTNTOKEN }}@github.com/PrimeStudentCouncil/BlueArchiveExcel.git PSCRepo
          Remove-Item PSCRepo\Japan -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item PSCRepo\Global -Recurse -Force -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Force -Path PSCRepo\Japan | Out-Null
          New-Item -ItemType Directory -Force -Path PSCRepo\Global | Out-Null

      - name: Validate and copy dump_extracted data
        shell: pwsh
        run: |
          function Test-DumpFolderValid {
            param([string]$basePath)
            $required = @("Excel","ExcelDB","HexaMap")
            foreach ($f in $required) {
              $p = Join-Path $basePath $f
              if (-not (Test-Path $p)) { return $false }
              if (-not (Get-ChildItem $p -File -Recurse | Where-Object { $_.Length -gt 0 })) { return $false }
            }
            return $true
          }

          $root      = Join-Path $env:GITHUB_WORKSPACE 'source\dump_extracted'
          $jpPath    = Join-Path $root 'Japan'
          $glPath    = Join-Path $root 'Global'

          $validJP   = Test-DumpFolderValid -basePath $jpPath
          $validGL   = Test-DumpFolderValid -basePath $glPath

          Write-Host "Japan valid: $validJP"
          Write-Host "Global valid: $validGL"

          if ($validJP) { Copy-Item "$jpPath\*" -Destination PSCRepo\Japan\ -Recurse -Force }
          if ($validGL) { Copy-Item "$glPath\*" -Destination PSCRepo\Global\ -Recurse -Force }

      - name: Commit & push changes
        shell: pwsh
        run: |
          Set-Location PSCRepo
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name  "github-actions[bot]"

          git add Japan Global
          $hasJP = (git diff --cached --name-only Japan)  -ne ''
          $hasGL = (git diff --cached --name-only Global) -ne ''

          if (-not $hasJP -and -not $hasGL) {
            Write-Host "No changes to commit."
            exit 0
          }

          $msgParts = @()
          if ($hasJP) { $msgParts += "JP $env:JP_VER" }
          if ($hasGL) { $msgParts += "GL $env:GL_VER" }
          $commitMsg = $msgParts -join ' '

          Write-Host "Committing with message: $commitMsg"
          git commit -m $commitMsg
          git push origin master

          Write-Host "Push completed successfully."
