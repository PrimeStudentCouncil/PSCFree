name: PSC Free Dumper

on:
  repository_dispatch:
    types: [PSCtrigger]

jobs:
  free-dumper-job:
    if: ${{ github.event.client_payload.tag == 'PSCtrigger-Free' }}
    runs-on: windows-latest

    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Clone Private Repository
        shell: pwsh
        run: git clone --depth=1 https://x-access-token:${{ secrets.KTNTOKEN }}@github.com/PrimeStudentCouncil/BlueArchiveAutoDump.git source

      - name: Install dependencies from private repo
        shell: pwsh
        working-directory: source
        run: |
          if (Test-Path requirements.txt) {
            pip install -r requirements.txt
          }

      - name: Run main.py from private repo
        shell: pwsh
        working-directory: source
        run: python main.py

      - name: Push dump_extracted/Japan & Global with versioned commit message
        shell: pwsh
        run: |
          function Test-DumpFolderValid {
            param([string]$basePath)
            $requiredFolders = @("Excel", "ExcelDB", "HexaMap")
            foreach ($folder in $requiredFolders) {
              $fullPath = Join-Path $basePath $folder
              if (-not (Test-Path $fullPath)) {
                return $false
              }
              if (-not (Test-Path "$fullPath\*" -PathType Leaf)) {
                return $false
              }
            }
            return $true
          }

          $japanPath = "..\source\dump_extracted\Japan"
          $globalPath = "..\source\dump_extracted\Global"

          $validJapan = Test-DumpFolderValid -basePath $japanPath
          $validGlobal = Test-DumpFolderValid -basePath $globalPath

          if (-not $validJapan -and -not $validGlobal) {
            exit 0
          }

          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          git clone --depth=1 https://x-access-token:${{ secrets.KTNTOKEN }}@github.com/PrimeStudentCouncil/BlueArchiveExcel.git PSCRepo

          Set-Location PSCRepo

          if (Test-Path Japan) { Remove-Item Japan -Recurse -Force }
          if (Test-Path Global) { Remove-Item Global -Recurse -Force }

          New-Item -ItemType Directory -Force -Path Japan | Out-Null
          New-Item -ItemType Directory -Force -Path Global | Out-Null

          if ($validJapan) {
            Copy-Item "$japanPath\*" -Destination Japan\ -Recurse -Force
          }

          if ($validGlobal) {
            Copy-Item "$globalPath\*" -Destination Global\ -Recurse -Force
          }

          git add Japan Global

          $hasJapanChange = (git diff --cached --name-only Japan) -ne ''
          $hasGlobalChange = (git diff --cached --name-only Global) -ne ''

          if (-not $hasJapanChange -and -not $hasGlobalChange) {
            exit 0
          }

          try {
            $globalJson = Get-Content ..\source\GlobalConfig.json -Raw | ConvertFrom-Json
            $globalVersion = ($globalJson.resource_path -split '/')[ -2 ]
          } catch {
            $globalVersion = "unknown"
          }

          try {
            $jpJson = Get-Content ..\source\JapanConfig.json -Raw | ConvertFrom-Json
            $jpVerRoot = $null
            if ($jpJson.ConnectionGroups -and $jpJson.ConnectionGroups[0].OverrideConnectionGroups) {
              $grp = $jpJson.ConnectionGroups[0].OverrideConnectionGroups
              $jpVerRoot = if ($grp.Count -gt 1) { $grp[1].AddressablesCatalogUrlRoot } else { $grp[0].AddressablesCatalogUrlRoot }
            }
            $jpVersion = if ($jpVerRoot) { ($jpVerRoot -split '/')[ -1 ] } else { "unknown" }
          } catch {
            $jpVersion = "unknown"
          }

          $commitMessage = ""
          if ($hasJapanChange) { $commitMessage += "JP $jpVersion " }
          if ($hasGlobalChange) { $commitMessage += "GL $globalVersion" }
          $commitMessage = $commitMessage.Trim()

          git commit -m $commitMessage
          git push origin master
